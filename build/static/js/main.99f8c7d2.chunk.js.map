{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","library","add","faTrash","App","state","currentItem","handleItem","bind","addItem","this","setState","Date","now","preventDefault","newItem","newItems","filteredItems","filter","onSubmit","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qVAgCeA,MA5Bf,SAAmBC,GACf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAEpB,OAAO,yBAAKC,UAAU,OAAOC,IAAK,YAC9B,2BACI,2BAAOC,KAAK,OACRC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SACI,SAACC,GACGZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAGjD,8BACI,kBAAC,IAAD,CAAiBD,UAAU,UAC3BU,KAAK,QACLC,QAAS,kBAAIhB,EAAMiB,WAAWb,EAAKE,cAKnD,OACI,6BAAML,I,eCdlBiB,IAAQC,IAAIC,K,IAiGGC,E,YA9Fb,WAAYrB,GAAO,IAAD,8BAChB,4CAAMA,KACDsB,MAAM,CACTpB,MAAO,GACPqB,YAAY,CACVb,KAAK,GACLJ,IAAI,KAKR,EAAKkB,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKR,WAAa,EAAKA,WAAWQ,KAAhB,gBAClB,EAAKZ,UAAY,EAAKA,UAAUY,KAAf,gBAdD,E,wEAmBPb,GACTe,KAAKC,SAAS,CACZL,YAAY,CACVb,KAAME,EAAEE,OAAOL,MACfH,IAAKuB,KAAKC,W,8BAORlB,GACNA,EAAEmB,iBAGF,IAAMC,EAAUL,KAAKL,MAAMC,YAE3B,GAAkB,KAAfS,EAAQtB,KAAW,CACpB,IAAMuB,EAAQ,sBAAON,KAAKL,MAAMpB,OAAlB,CAAyB8B,IACvCL,KAAKC,SAAS,CACZ1B,MAAO+B,EACPV,YAAY,CACVb,KAAK,GACLJ,IAAI,S,iCAMDA,GACT,IAAM4B,EAAgBP,KAAKL,MAAMpB,MAAMiC,QAAO,SAAA/B,GAAI,OAClDA,EAAKE,MAAMA,KACXqB,KAAKC,SAAS,CACZ1B,MAAOgC,M,gCAIDxB,EAAMJ,GACd,IAAMJ,EAAQyB,KAAKL,MAAMpB,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZF,EAAKM,KAAKA,MAGdiB,KAAKC,SAAS,CACZ1B,MAAOA,M,+BAKT,OACE,yBAAKG,UAAU,OACb,wBAAIA,UAAU,SAAd,oBACA,4BAAQA,UAAU,wBAChB,0BAAMG,GAAG,gBAAgB4B,SAAUT,KAAKD,SACtC,2BACEnB,KAAK,OACL8B,YAAY,gBACZ5B,MAAOkB,KAAKL,MAAMC,YAAYb,KAC9BC,SAAUgB,KAAKH,aAEjB,4BAAQjB,KAAK,UAAb,SAGF,yBAAKF,UAAU,gCAAf,qEACA,kBAAC,EAAD,CACEH,MAASyB,KAAKL,MAAMpB,MACpBe,WAAYU,KAAKV,WACjBJ,UAAWc,KAAKd,iB,GAxFVyB,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.99f8c7d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nfunction ListItems(props){\r\n    const items = props.items;\r\n    const listItems = items.map(item =>\r\n        {\r\n            return <div className='list' key={'item.key'}>\r\n                <p>\r\n                    <input type='text' \r\n                        id={item.key} \r\n                        value={item.text}\r\n                        onChange = {\r\n                            (e) => {\r\n                                props.setUpdate(e.target.value, item.key)\r\n                            }\r\n                        }/>\r\n                    <span>\r\n                        <FontAwesomeIcon className='faicons' \r\n                        icon='trash'\r\n                        onClick={()=>props.deleteItem(item.key)}/>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n        })\r\n        return(\r\n            <div>{listItems}</div>\r\n        )\r\n\r\n}\r\n\r\nexport default ListItems;\r\n\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport ListItems from './ListItems';\r\n\r\n//https://github.com/FortAwesome/react-native-fontawesome\r\n/*\r\n$ npm i --save @fortawesome/fontawesome-svg-core\r\n$ npm i --save @fortawesome/free-solid-svg-icons\r\n$ npm i --save @fortawesome/react-fontawesome\r\n*/\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(faTrash)\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={ //initial state\r\n      items: [],\r\n      currentItem:{\r\n        text:'', //initially empty\r\n        key:'' //initially empty\r\n      }\r\n    }\r\n    //https://www.freecodecamp.org/news/this-is-why-we-need-to-bind-event-handlers-in-class-components-in-react-f7ea1a6f93eb/\r\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\r\n    this.handleItem = this.handleItem.bind(this); //***\r\n    this.addItem = this.addItem.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n    this.setUpdate = this.setUpdate.bind(this);\r\n  }\r\n\r\n  //text entered into textbox with unique key (actual date and time)\r\n  //the text the user is entering gets stored in this obj\r\n  handleItem(e){\r\n    this.setState({\r\n      currentItem:{\r\n        text: e.target.value, //this is the current item entered in the texbox\r\n        key: Date.now() //actual date and time as unique key\r\n      }\r\n    })\r\n  }\r\n\r\n  //the user can add new items to the existing array obj (above)\r\n  //the new item is stored in a var so it can be added to the array obj\r\n  addItem(e){\r\n    e.preventDefault();//default behaviour of a button is that it loads again the page - this is how you can prevent the reload\r\n    //it is necessary to bind the this value to constructor function \r\n    //the this keyword does not point to the class automatically - we need to bind to the constructor\r\n    const newItem = this.state.currentItem; //***\r\n    //console.log(newItem);\r\n    if(newItem.text!=='') { //checking if newItem.text is not empty \r\n      const newItems = [...this.state.items, newItem]; //destructuring assignment, adding item to our list\r\n      this.setState({\r\n        items: newItems,\r\n        currentItem:{ //setting back current item to empty values - kind of an init\r\n          text:'',\r\n          key:''\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  deleteItem(key){\r\n    const filteredItems = this.state.items.filter(item => \r\n    item.key!==key);  \r\n    this.setState({\r\n      items: filteredItems\r\n    })\r\n  }\r\n\r\n  setUpdate(text, key){\r\n    const items = this.state.items;\r\n    items.map(item => {\r\n      if(item.key===key){\r\n        item.text=text;\r\n      }\r\n    })\r\n    this.setState({\r\n      items: items\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className='App'>\r\n        <h1 className='Title'>My Shopping List</h1>\r\n        <header className='nowrap tc center pr3'/*'InputBox'*/>{/*keeps button and input in one line*/}\r\n          <form id='shopping-list' onSubmit={this.addItem}>\r\n            <input \r\n              type='text' \r\n              placeholder='Enter item...' \r\n              value={this.state.currentItem.text}\r\n              onChange={this.handleItem}\r\n            />\r\n            <button type='submit'>Add</button>\r\n          </form>\r\n        </header>\r\n          <div className='nowrap white tc center b pb3'>- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</div>\r\n          <ListItems \r\n            items = {this.state.items}\r\n            deleteItem={this.deleteItem}\r\n            setUpdate={this.setUpdate}>\r\n          </ListItems>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}